/* tslint:disable */
/* eslint-disable */
/**
 * Svinka
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LinkReadSchema
 */
export interface LinkReadSchema {
    /**
     * 
     * @type {string}
     * @memberof LinkReadSchema
     */
    'label': string;
    /**
     * 
     * @type {LinkTypesChoices}
     * @memberof LinkReadSchema
     */
    'link_type': LinkTypesChoices;
    /**
     * 
     * @type {string}
     * @memberof LinkReadSchema
     */
    'link_url': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const LinkTypesChoices = {
    Logo: 'logo',
    Email: 'email',
    Link: 'link',
    Facebook: 'facebook',
    Instagram: 'instagram',
    Tiktok: 'tiktok',
    Youtube: 'youtube',
    X: 'x'
} as const;

export type LinkTypesChoices = typeof LinkTypesChoices[keyof typeof LinkTypesChoices];


/**
 * 
 * @export
 * @interface SubscriptionResponse
 */
export interface SubscriptionResponse {
    /**
     * Имя пользователя
     * @type {string}
     * @memberof SubscriptionResponse
     */
    'full_name': string;
    /**
     * Активна ли ссылка
     * @type {boolean}
     * @memberof SubscriptionResponse
     */
    'is_active': boolean;
}
/**
 * 
 * @export
 * @interface SuccessResponseListLinkReadSchema
 */
export interface SuccessResponseListLinkReadSchema {
    /**
     * Статус
     * @type {string}
     * @memberof SuccessResponseListLinkReadSchema
     */
    'status'?: string;
    /**
     * 
     * @type {Array<LinkReadSchema>}
     * @memberof SuccessResponseListLinkReadSchema
     */
    'data': Array<LinkReadSchema> | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Подтвердить подписку
         * @param {string} exportHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmWithoutSupport: async (exportHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportHash' is not null or undefined
            assertParamExists('confirmWithoutSupport', 'exportHash', exportHash)
            const localVarPath = `/api/v1/subscription/{export_hash}/confirm-without-support/`
                .replace(`{${"export_hash"}}`, encodeURIComponent(String(exportHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ссылки на социальные сети
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSocialMedia: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/links/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Информация о подписчике
         * @param {string} exportHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (exportHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportHash' is not null or undefined
            assertParamExists('getSubscription', 'exportHash', exportHash)
            const localVarPath = `/api/v1/subscription/{export_hash}`
                .replace(`{${"export_hash"}}`, encodeURIComponent(String(exportHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Подтвердить подписку
         * @param {string} exportHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmWithoutSupport(exportHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmWithoutSupport(exportHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.confirmWithoutSupport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ссылки на социальные сети
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSocialMedia(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseListLinkReadSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSocialMedia(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSocialMedia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Информация о подписчике
         * @param {string} exportHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(exportHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(exportHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Подтвердить подписку
         * @param {string} exportHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmWithoutSupport(exportHash: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.confirmWithoutSupport(exportHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ссылки на социальные сети
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSocialMedia(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponseListLinkReadSchema> {
            return localVarFp.getSocialMedia(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Информация о подписчике
         * @param {string} exportHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(exportHash: string, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionResponse> {
            return localVarFp.getSubscription(exportHash, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Подтвердить подписку
     * @param {string} exportHash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public confirmWithoutSupport(exportHash: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).confirmWithoutSupport(exportHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ссылки на социальные сети
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSocialMedia(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSocialMedia(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Информация о подписчике
     * @param {string} exportHash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubscription(exportHash: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubscription(exportHash, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InternalApi - axios parameter creator
 * @export
 */
export const InternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Trigger Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerError: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-internal/v1/sentry-debug/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalApi - functional programming interface
 * @export
 */
export const InternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Trigger Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerError(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerError(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalApi.triggerError']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InternalApi - factory interface
 * @export
 */
export const InternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternalApiFp(configuration)
    return {
        /**
         * 
         * @summary Trigger Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerError(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.triggerError(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InternalApi - object-oriented interface
 * @export
 * @class InternalApi
 * @extends {BaseAPI}
 */
export class InternalApi extends BaseAPI {
    /**
     * 
     * @summary Trigger Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    public triggerError(options?: RawAxiosRequestConfig) {
        return InternalApiFp(this.configuration).triggerError(options).then((request) => request(this.axios, this.basePath));
    }
}



